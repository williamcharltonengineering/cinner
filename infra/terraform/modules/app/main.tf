terraform {
  required_providers {
    http = {
      source  = "hashicorp/http"
      version = "~> 3.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4.0"
    }
    null = {
      source  = "hashicorp/null"
      version = "~> 3.2.0"
    }
  }
}

# Generate the Unraid Docker container run command
locals {
  # Format environment variables for docker run command
  formatted_env_vars = join(" ", [
    for key, value in var.environment_vars : 
    "-e \"${key}=${value}\""
  ])
  
  # Create a docker run command
  docker_command = <<-EOT
    docker stop ${var.container_name} || true && \
    docker rm ${var.container_name} || true && \
    docker run -d \
      --name ${var.container_name} \
      -p ${var.app_port}:${var.app_port} \
      ${local.formatted_env_vars} \
      --restart unless-stopped \
      ${var.image_name}:${var.image_tag}
  EOT
  
  # Create a shell script for the Unraid server
  unraid_script = <<-EOT
    #!/bin/bash
    # Docker deployment script for ${var.container_name}
    # Generated by Terraform

    # Pull the latest image
    docker pull ${var.image_name}:${var.image_tag}

    # Remove any existing container
    docker stop ${var.container_name} 2>/dev/null || true
    docker rm ${var.container_name} 2>/dev/null || true

    # Run the new container
    docker run -d \\
      --name ${var.container_name} \\
      -p ${var.app_port}:${var.app_port} \\
      ${join(" \\\n      ", [
        for key, value in var.environment_vars : 
        "-e \"${key}=${value}\""
      ])} \\
      --restart unless-stopped \\
      ${var.image_name}:${var.image_tag}

    echo "Container ${var.container_name} deployed successfully"
    docker ps | grep ${var.container_name}
  EOT
}

# Create a local file with the deployment script
resource "local_file" "unraid_script" {
  content  = local.unraid_script
  filename = "${path.module}/generated/${var.container_name}_deploy.sh"
  
  # Make the script executable
  provisioner "local-exec" {
    command = "chmod +x ${path.module}/generated/${var.container_name}_deploy.sh"
  }
}

# Deploy container using SSH
resource "null_resource" "deploy_container" {
  # Trigger redeployment when the script changes
  triggers = {
    script_hash = sha256(local.unraid_script)
  }

  provisioner "local-exec" {
    command = <<-EOT
      echo "Deploying container to Unraid server via Docker..."
      
      # Method 1: Try direct SSH command
      # Note: This requires SSH key authentication to be set up
      # or password-less access to the Unraid server
      ssh root@192.168.1.15 "docker pull ${var.image_name}:${var.image_tag} && \
        docker stop ${var.container_name} 2>/dev/null || true && \
        docker rm ${var.container_name} 2>/dev/null || true && \
        docker run -d \
          --name ${var.container_name} \
          -p ${var.app_port}:${var.app_port} \
          ${local.formatted_env_vars} \
          --restart unless-stopped \
          ${var.image_name}:${var.image_tag}"
      
      # If the SSH command fails, print instructions for manual deployment
      if [ $? -ne 0 ]; then
        echo "Failed to deploy via SSH. Manual deployment may be required."
        echo ""
        echo "A deployment script has been generated at: ${path.module}/generated/${var.container_name}_deploy.sh"
        echo "You can copy this script to your Unraid server and run it directly."
        echo ""
        echo "To copy the script: scp ${path.module}/generated/${var.container_name}_deploy.sh root@192.168.1.15:/tmp/"
        echo "To run the script on Unraid: ssh root@192.168.1.15 'bash /tmp/${var.container_name}_deploy.sh'"
        echo ""
        echo "Alternatively, you can use the Unraid web UI to create a container with:"
        echo "  - Image: ${var.image_name}:${var.image_tag}"
        echo "  - Name: ${var.container_name}"
        echo "  - Port mapping: ${var.app_port}:${var.app_port}"
        echo "  - Environment variables defined in terraform.tfvars"
      fi
    EOT
  }
}
